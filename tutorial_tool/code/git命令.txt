----重置暂存区的代码
git reset HEAD file
git reset 	所做的事情就是修改 master 分支对 commit 对象的引用。
git reset 	有很多参数，区别在于对仓库文件状态的处理，
			共同点都是修改 .git/refs/heads 目录下，当前分支对应的引用文件

----按照合并数量给贡献者排序
git shortlog -sn --no-merges

----查看某文件的每一行代码的作者，最新commit和提交时间
git blame xxx
git blame -L 40,60 foo
git blame -L 40,+21 foo
git blame -L '/^sub hello {/,/^}$/' foo
git blame v2.6.18.. -- foo
git blame --since=3.weeks -- foo

----未在项目初期加入合适的gitignore文件的处理办法
git rm -r --cached .
git add .		
git commit 		
git push --set-upstream origin universe_develop

----取消某个文件的修改，还原
git status -sb
git checkout .../.../.../xxx.java

----Git集成本地Diff工具
1、beyond compare	参考同路径下文件	gitDiffBc.txt
2、WinMerge			参考同路径下文件	gitDiffWinMerge.txt
使用时，通过命令git difftool

----git merge提交步骤
git checkout master
git fetch --all
git add . && git commit -am "xxx"
git rebase origin/develop_salve_v2(不要执行git merge操作)
git push

----取消警告warning: LF will be replaced by CRLF
git config --global core.autocrlf false

----设置git编码
git config --global gui.encoding utf-8

----分支branch操作
1、创建本地branch：				git branch branch_name
2、本地切换branch：				git checkout branch_name
3、本地直接创建并切换本地分支：			git checkout -b branch_name
4、本地新建分支推送至远程分支			git push origin branch_name
5、获取远程分支来新建本地分支，并建立关联关系：					git checkout -b branch_name origin/branch_name
6、查看远程分支：						git branch -r
	查看本地分支					git branch 
7、删除本地分支：						git branch -d branch_name
	删除远程branch					git push origin :branch_name 

----标签tag操作
1、在本地切换到需要tag的分支 	git checkout branch_name;
2、本地打tag：					git tag -a tagname -m "上线版本"
3、将本地tag推送到服务器：		git push origin tagname
4、获取远程tag：				git fetch origin tag tagname
5、本地切换到tag工作：			git checkout tagname
6、查看tag信息：				git show tagname
7、删除tag：					git tag -d tagname

----git log查看
git log --author=author_name
git log --author=author_name --stat
git log --oneline

----git回滚
回滚指定提交					git revert 1ddcdcda02b4a48a2527e835ec4c15dc94d5e7c4

----查看历史差异
查看具体单次提交				gitk 1ddcdcda02b4a48a2527e835ec4c15dc94d5e7c4

----将一个分支的某个提交复制到其他分支
1、获取当次提交的key
								git add . && git commit -am "修复获取一度联系人bug"
								[develop_slave_v2 1f047e4] 修复获取一度联系人bug
2、切换到目标分支					git checkout 其他分支
3、抓取当次提交					git cherry-pick 1f047e4

----安装git
# centos
sudo yum install git
# ubuntu
sudo apt-get install git

----配置git环境
# 提交代码的log里面会显示提交者的信息
git config --global user.name xxxxx
git config --global user.email xxxxx@xxx.com

----生成本地ssh 密钥
1）查看本地是否已经存在ssh密钥： cd ~/.ssh
   如果没有密钥则不会有此文件夹，有则备份后删除。
2）生成密钥： ssh-keygen -t rsa -C "xxxxxx@xxx.com" （ps：**一定是你的工作邮箱，勿错！**）
   按三次回车键，密码为空，打印一段文字后，生成两个文件：id_rsa和id_rsa.pub。

----配置Host、端口号
编辑~/.ssh/config文件，添加以下几行：
Host xx.xx.xx.xx
User git
Port 65360

----上传权限
1. 登录http://xx.xx.xx.xx/
2. 点击右上的profile settings
3. 点击左边栏的ssh keys，添加自己开发机上的public key
4. 在开发机上即可通过git clone <上面的项目地址>进行代码协作开发

----.gitconfig全量备份
[i18n]
	commitencoding = utf-8
	logoutputencoding = utf-8
[gui]
	encoding = utf-8

#使用beyond compare来查看文件差异
[diff]
#对比工具名称,必须与difftool项里的名称保持一致
tool = WinMerge
[difftool "WinMerge"]
#beyond compare路径和调用命令
#$REMOTE 表示commit之后的文件
#LOCAL 表示commit到git的文件
cmd = "\"D:/data/app/WinMerge/WinMerge/WinMergeU.exe\" \"$REMOTE\" \"$LOCAL\""
#合并分支
[merge]
#对比工具名称,必须与mergetool项里的名称保持一致
tool = WinMerge
[mergetool]
prompt = false
[mergetool "WinMerge"]
#beyond compare路径和调用命令
cmd = "\"D:/data/app/WinMerge/WinMerge/WinMergeU.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\""
[user]
	email = 784622876@qq.com
	name = hanhongtao
[core]
	autocrlf = false
# git 命令别名
	log1 = log --graph --pretty='format:%C(red)%d%C(reset) %C(yellow)%h%C(reset) %ar %C(green)%aN%C(reset) %s'
	log2 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
	status1 = status -sb
